generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Service {
  id           Int        @id @default(autoincrement())
  name         String
  description  String
  category     String
  averagePrice Float
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  bookings     Booking[]
  providers    Provider[] @relation("ProviderToService")

  @@map("services")
}

model Provider {
  id                         Int       @id @default(autoincrement())
  userId                     Int       @unique
  rating                     Float     @default(0)
  reviews                    Int       @default(0)
  experience                 String?
  location                   String?
  hourlyRate                 Float?
  bio                        String?
  verified                   Boolean   @default(false)
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
  verificationRequested      Boolean   @default(false)
  verificationRequestedAt    DateTime?
  verificationRejectedReason String?
  verifiedBy                 Int?
  verifiedAt                 DateTime?
  bookings                   Booking[]
  user                       User      @relation("ProviderUser", fields: [userId], references: [id], onDelete: Cascade)
  services                   Service[] @relation("ProviderToService")
  // verifiedBy stores the ID of the admin's user who verified; kept as scalar
  

  @@map("providers")
}

model User {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  email     String    @unique
  password  String
  phone     String?
  userType  UserType  @default(CUSTOMER)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  customer  Customer?
  provider  Provider? @relation("ProviderUser")
  admin     Admin?

  @@map("users")
}

model Customer {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bookings  Booking[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("customers")
}

model Booking {
  id         Int           @id @default(autoincrement())
  date       DateTime
  time       String
  status     BookingStatus @default(PENDING)
  notes      String?
  totalPrice Float?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  serviceId  Int
  providerId Int
  customerId Int
  customer   Customer      @relation(fields: [customerId], references: [id])
  provider   Provider      @relation(fields: [providerId], references: [id])
  service    Service       @relation(fields: [serviceId], references: [id])

  @@map("bookings")
}

model Admin {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  auditLogs         AuditLog[]
  // verifiedProviders field removed; verification references User instead

  @@map("admins")
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  adminId    Int
  action     String
  targetType String   // 'USER', 'PROVIDER', 'SERVICE', etc.
  targetId   Int?
  details    Json?
  createdAt  DateTime @default(now())
  admin      Admin    @relation(fields: [adminId], references: [id])

  @@map("audit_logs")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum UserType {
  CUSTOMER
  PROVIDER
  ADMIN
}
